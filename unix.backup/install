#!/bin/bash

info() {
  printf '\r  [ \033[00;34m..\033[0m ] %s\n' "$1"
}

user() {
  printf '\r  [ \033[0;33m??\033[0m ] %s\n' "$1"
}

success() {
  printf '\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n' "$1"
}

fail() {
  printf '\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n' "$1"
  echo ''
  exit
}

function install_font {
  # Install Fira Code
  # https://medium.com/source-words/how-to-manually-install-update-and-uninstall-fonts-on-linux-a8d09a3853b0
  mkdir -p "$HOME/.local/share/fonts"
  if [ ! -f "$HOME/.local/share/fonts/FiraCodeNerdFont-Regular.ttf" ]; then
    cd "$HOME/.local/share/fonts" && curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/FiraCode/Regular/FiraCodeNerdFont-Regular.ttf
    fc-cache -f -v
    cd "$HOME"
  else
    info "Already installed font Fira Code"
  fi
}

function install_neovim {
  if ! command -v nvim >/dev/null 2>&1; then
    # Install latest Neovim
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
    sudo rm -rf /opt/nvim
    sudo tar -C /opt -xzf nvim-linux64.tar.gz
    rm -rf nvim-linux64.tar.gz
  else
    info "Already installed Neovim"
  fi
}

function install_debian {
  sudo apt update -y
  sudo apt install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev curl git libncursesw5-dev xz-utils \
    tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
    unzip zsh vim tmux fontconfig fzf fd-find ripgrep

  install_neovim

  # Extra after installing fd-find
  if [ ! -f "$HOME/.local/bin/fd" ]; then
    mkdir -p "$HOME/.local/bin"
    ln -s "$(which fdfind)" "$HOME/.local/bin/fd"
  else
    info "Already symlinked fd-find in '.local/bin'"
  fi
  install_font

  # Install Lazygit
  if ! command -v lazygit >/dev/null 2>&1; then
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm -rf lazygit.tar.gz lazygit
  else
    info "Already installed lazygit"
  fi
}

function install_mac {
  if ! command -v brew >/dev/null 2>&1; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
  brew update
  brew install bash wget tmux git vim neovim fzf fd ripgrep gcc font-fira-code-nerd-font \
    gnupg pinentry-mac jesseduffield/lazygit/lazygit ast-grep

  # Ghostty
  brew install --cask ghostty
}

function install_linux {
  if [[ -f "/etc/os-release" ]]; then
    source /etc/os-release
    if [[ "$ID" == "debian" || "$ID_LIKE" == *"debian"* ]]; then
      install_debian
    else
      fail "Unknown Linux distribution."
    fi
  else
    fail "Could not detect Linux distribution."
  fi
}

function install_packages {
  info "Installing packages"
  if [[ "$(uname)" == "Linux" ]]; then
    install_linux
  elif [[ "$(uname)" == "Darwin" ]]; then
    install_mac
  else
    fail "Unsupported system: $(uname)"
  fi

  if [[ "$SHELL" != "$(which zsh)" ]]; then
    info "Changing default shell to zsh"
    chsh -s "$(which zsh)"
  else
    info "Already has zsh as default shell"
  fi
  success "Finished installing packages"
}

function clone_repo {
  if [ ! -d "$HOME/dotfiles" ]; then
    info "Cloning dotfiles repo"
    cd "$HOME" || return
    git clone git@github.com:QuanDo2000/dotfiles.git
    success "Finished cloning dotfiles repo"
  else
    info "Updating dotfiles repo"
    cd "$HOME/dotfiles" || return
    git pull
    success "Finished git pull dotfiles repo"
  fi
}

function install_oh_my_zsh {
  if [ ! -d "$HOME/.oh-my-zsh" ]; then
    info "Installing oh-my-zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  else
    info "oh-my-zsh already installed"
  fi
}

function install_zsh_plugins {
  if [ -d "$HOME/.oh-my-zsh" ]; then
    info "Installing zsh plugins"
    if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
      # Install zsh-autosuggestions
      git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
    fi
    if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting" ]; then
      # Install fast-syntax-highlighting
      git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git \
        "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting"
    fi
    # Install fzf-tab
    if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fzf-tab" ]; then
      git clone https://github.com/Aloxaf/fzf-tab "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fzf-tab"
    fi
    success "Finished installing zsh plugins"
  else
    fail "oh-my-zsh not installed."
  fi
}

function install_tmux_plugins {
  if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    info "Installing tmux plugins"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
    "$HOME/.tmux/plugins/tpm/bin/install_plugins"
    success "Finished installing tmux plugins"
  else
    info "Already installed TPM"
  fi

  if [ ! -d "$HOME/.tmux/plugins/catppuccin" ]; then
    info "Installing catppuccin for tmux"
    git clone -b v2.1.2 https://github.com/catppuccin/tmux.git ~/.tmux/plugins/catppuccin/tmux
  else
    info "Already installed catppuccin for tmux"
  fi
}

function install_extras {
  info "Installing extras"
  install_oh_my_zsh
  install_zsh_plugins
  install_tmux_plugins
  success "Finished installing extras"
}

function link_files {
  local src=$1 dst=$2

  local overwrite=false backup=false skip=false action=false

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]; then
    if [[ "$overwrite_all" == "false" && "$backup_all" == "false" && "$skip_all" == "false" ]]; then
      local current_src
      current_src="$(readlink "$dst")"

      if [[ "$current_src" == "$src" ]]; then
        skip=true
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -nr 1 action

        case "$action" in
        o)
          overwrite=true
          ;;
        O)
          overwrite_all=true
          ;;
        b)
          backup=true
          ;;
        B)
          backup_all=true
          ;;
        s)
          skip=true
          ;;
        S)
          skip_all=true
          ;;
        *) ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [[ "$overwrite" == "true" ]]; then
      rm -rf "$dst"
      success "Removed $dst"
    fi

    if [[ "$backup" == "true" ]]; then
      mv "$dst" "${dst}.backup"
      success "Moved $dst to ${dst}.backup"
    fi

    if [[ "$skip" == "true" ]]; then
      success "Skipped $src"
    fi
  fi

  if [[ "$skip" != "true" ]]; then
    ln -s "$1" "$2"
    success "Linked $1 to $2"
  fi
}

function setup_symlinks {
  info "Setting up symlinks"
  DOTFILES_ROOT="$HOME/dotfiles/unix"
  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink'); do
    info "$src"
    dst="$HOME/.$(basename "${src%.*}")"
    link_files "$src" "$dst"
  done
}

function setup_dotfiles {
  info "Setting up dotfiles"
  install_packages
  clone_repo
  install_extras
  setup_symlinks
  success "Done!"
}

if [ "$1" = "--install" ] || [ "$1" = "-i" ]; then
  install_packages
  install_extras
  exit 0
fi

if [ "$1" = "--symlinks" ] || [ "$1" = "-s" ]; then
  setup_symlinks
  exit 0
fi

setup_dotfiles
exit 0
